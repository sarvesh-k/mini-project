PROJECT_NAME = Electrical

# Output directory
BUILD = build

COVERAGE_TEST_NAME = coverage_$(PROJECT_NAME)

# All source code files
SRC = main.c\
src/bill.c\
src/motor.c\
src/transformer.c

# All test source files
TEST_SRC = src/motor.c\
src/transformer.c\
test/test.c\
unity/unity.c\


ifdef OS
   EXEC = exe
else
   ifeq ($(shell uname), Linux)
	  EXEC = out
   endif
endif

TEST_OUTPUT = $(BUILD)/Test_$(PROJECT_NAME).$(EXEC)

# All include folders with header files
INC	= -Iinc\
-Iunity\

#Library Inlcudes
#INCLUDE_LIBS = 
INCLUDE_LIBS = -lcunit

# Project Output name
PROJECT_OUTPUT = $(BUILD)/$(PROJECT_NAME).$(EXEC)

# Document files
DOCUMENTATION_OUTPUT = documentation/html

# Default target built
$(PROJECT_NAME):all

# Run the target even if the matching name exists
.PHONY: run clean test doc all

all: $(SRC) $(BUILD)
	gcc $(SRC) $(INC) -o $(PROJECT_OUTPUT) -lm

# Call `make run` to run the application
run:$(PROJECT_NAME)
	./$(PROJECT_OUTPUT)

# Document the code using Doxygen
doc:
	make -C ./documentation

# Build and run the unit tests
test:$(BUILD)
	gcc $(TEST_SRC) $(INC) -o $(TEST_OUTPUT)  -lm
	./$(TEST_OUTPUT)
	
coverage:$(SRC) 
	
	gcc -fprofile-arcs -ftest-coverage -I -c $(SRC) $(INC)  -o $(COVERAGE_TEST_NAME).$(EXEC) -lm
	./$(COVERAGE_TEST_NAME).$(EXEC) 
	gcov -a test.c
# Remove all the built files, invoke by `make clean`
clean:
	del *.DAT
	del *.$(EXEC)
	rm -rf $(BUILD) $(DOCUMENTATION_OUTPUT)

# Create new build folder if not present
$(BUILD):
	mkdir build
